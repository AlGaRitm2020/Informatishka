import asyncio
import logging

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

import keyboards
from loader import dp
import parsing
import states


@dp.message_handler(state=states.SolveTask.enter_number)
async def enter_number(message: Message, state: FSMContext):
    # another variant to get state
    # state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    try:
        task_number = message.text
        if int(task_number) < 1 or int(task_number) > 27:
            raise ValueError


    except ValueError:
        "if task_number isn't int"
        await message.answer("‚ö† –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 27, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑")
        await states.SolveTask.enter_number.set()

    coroutine_task = asyncio.create_task(parsing.get_task_by_number(task_number))
    await asyncio.gather(coroutine_task)

    task_text, right_answer, byte_img, byte_excel, byte_word, byte_txt_1, byte_txt_2 = coroutine_task.result()

    await state.update_data(task_number=task_number,
                            task_text=task_text,
                            right_answer=right_answer)

    if task_number not in '192021':
        await message.answer(f'–ó–∞–¥–∞–Ω–∏–µ ‚Ññ {task_number}\n' + task_text)
    else:
        await message.answer(f'–ó–∞–¥–∞–Ω–∏—è ‚Ññ 19, 20, 21\n' + task_text)

    if byte_img:
        with open('data/temp_task_files/task.png', 'wb') as img:
            img.write(byte_img)
        img = open("data/temp_task_files/task.png", "rb")
        await message.answer_photo(img)

    if byte_excel:
        with open(f'data/temp_task_files/{task_number}_task.xlsx', 'wb') as xlsx:
            xlsx.write(byte_excel)
        excel_file = open(f"data/temp_task_files/{task_number}_task.xlsx", "rb")
        await message.answer_document(excel_file)
    if byte_word:
        with open(f'data/temp_task_files/{task_number}_task.docx', 'wb') as docx:
            docx.write(byte_word)
        doc_file = open(f"data/temp_task_files/{task_number}_task.docx", "rb")
        await message.answer_document(doc_file)
    if byte_txt_1:
        with open(f'data/temp_task_files/{task_number}_A_task.txt', 'wb') as txt:
            txt.write(byte_txt_1)
        txt1_file = open(f"data/temp_task_files/{task_number}_A_task.txt", "rb")
        await message.answer_document(txt1_file)
    if byte_txt_2:
        with open(f'data/temp_task_files/{task_number}_B_task.txt', 'wb') as txt:
            txt.write(byte_txt_2)
        txt2_file = open(f"data/temp_task_files/{task_number}_B_task.txt", "rb")
        await message.answer_document(txt2_file)

    if 21 >= int(task_number) >= 19:
        await message.answer(
            '‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–∞–∂–¥—ã–π –∏–∑ —Ç—Ä–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π(;), '
            '–∞ –æ—Ç–≤–µ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ–±–µ–ª–æ–º')
    else:
        await message.answer('‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —É–∫–∞–∂–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    await states.SolveTask.next()


@dp.message_handler(state=states.SolveTask.enter_answer)
async def enter_answer(message: Message, state: FSMContext):
    # getting task data from state vars
    data = await state.get_data()
    task_number = data.get('task_number')
    right_answer = data.get('right_answer')

    answer = message.text
    answer.strip()

    await state.update_data(answer=answer)

    if answer == right_answer:
        await message.answer(f'‚úÖ –í—ã –∞–±–ª–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤—ã. –û—Ç–≤–µ—Ç: {answer}', reply_markup=keyboards.default.main_menu)
    else:
        await message.answer(f'üö´ –í–∞—à –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–µ–Ω. –û—Ç–≤–µ—Ç: {right_answer}. ',
                             reply_markup=keyboards.default.main_menu)
    await state.finish()
